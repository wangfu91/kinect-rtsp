name: Release

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'

jobs:
  build-and-release:
    name: Build & Publish (Windows)
    runs-on: windows-latest
    env:
      GST_VERSION: 1.26.5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Cache GStreamer
        id: gst-cache
        uses: actions/cache@v4
        with:
          path: C:\Program Files\gstreamer\1.0
          key: ${{ runner.os }}-gstreamer-devel-${{ env.GST_VERSION }}

      - name: Install / Setup GStreamer (devel only)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ver  = "$env:GST_VERSION"
          $root = 'C:\Program Files\gstreamer\1.0\msvc_x86_64'
          $pkgCfg = Join-Path $root 'bin/pkg-config.exe'
          if (-not (Test-Path $pkgCfg)) {
            Write-Host "GStreamer devel $ver not cached. Downloading devel package..."
            $base = "https://gstreamer.freedesktop.org/data/pkg/windows/$ver/msvc"
            $develMsi = "gstreamer-1.0-devel-msvc-x86_64-$ver.msi"
            Invoke-WebRequest "$base/$develMsi" -OutFile gst-devel.msi -UseBasicParsing
            Start-Process msiexec -ArgumentList '/i','gst-devel.msi','/qn','/norestart' -Wait
            Write-Host "Installed GStreamer devel $ver"
          } else {
            Write-Host "Using cached GStreamer devel $ver"
          }
          Add-Content -Path $env:GITHUB_ENV -Value "GSTREAMER_ROOT=$root"
          Add-Content -Path $env:GITHUB_ENV -Value "PKG_CONFIG_PATH=$root\lib\pkgconfig"
          Add-Content -Path $env:GITHUB_ENV -Value ("PATH=$($root)\bin;" + $env:PATH)
          & "$pkgCfg" --version

      - name: Build (release)
        run: cargo build --release --locked

      - name: Prepare package
        id: prep
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = $env:GITHUB_REF -replace 'refs/tags/'
          $outDir = "target/release"
          if (!(Test-Path "$outDir/kinect-rtsp.exe")) { throw 'Missing kinect-rtsp.exe after build' }
          if (Test-Path 'run.ps1' -and !(Test-Path "$outDir/run.ps1")) { Copy-Item run.ps1 $outDir }
          $zipName = "kinect-rtsp-$tag-windows-x64.zip"
          Compress-Archive -Path "$outDir/kinect-rtsp.exe", "$outDir/run.ps1" -DestinationPath $zipName -Force
          Write-Host "Created $zipName"
          $hash = (Get-FileHash -Algorithm SHA256 $zipName).Hash
          "$hash  $zipName" | Out-File -FilePath "$zipName.sha256" -Encoding ASCII
          Write-Host "SHA256: $hash"
          "zip_name=$zipName" >> $env:GITHUB_OUTPUT

      - name: Upload artifacts (zip + checksum)
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ${{ steps.prep.outputs.zip_name }}
            ${{ steps.prep.outputs.zip_name }}.sha256

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.prep.outputs.zip_name }}
            ${{ steps.prep.outputs.zip_name }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
