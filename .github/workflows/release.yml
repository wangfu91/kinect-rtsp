name: Release

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'

jobs:
  build-and-release:
    name: Build & Publish (Windows)
    runs-on: windows-latest
    env:
      GST_VERSION: 1.26.5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Cache GStreamer
        id: gst-cache
        uses: actions/cache@v4
        with:
          path: C:\gstreamer\1.0
          key: ${{ runner.os }}-gstreamer-devel-${{ env.GST_VERSION }}

      - name: Install / Setup GStreamer (devel only)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ver  = $env:GST_VERSION
          $root = 'C:\gstreamer\1.0\msvc_x86_64'
          $pcDir = Join-Path $root 'lib/pkgconfig'
          if (-not (Test-Path (Join-Path $pcDir 'gstreamer-1.0.pc'))) {
            Write-Host "GStreamer devel $ver not cached. Downloading..."
            $base = "https://gstreamer.freedesktop.org/data/pkg/windows/$ver/msvc"
            $msi  = "gstreamer-1.0-devel-msvc-x86_64-$ver.msi"
            try {
              Invoke-WebRequest -Uri "$base/$msi" -OutFile gst-devel.msi -UseBasicParsing -ErrorAction Stop
            } catch {
              $err = $_.Exception.Message
              throw "Failed to download ${msi}: $err"
            }
            if (-not (Test-Path 'gst-devel.msi')) { throw "Download did not produce gst-devel.msi" }
            $size = (Get-Item 'gst-devel.msi').Length
            if ($size -lt 5MB) { throw "Downloaded gst-devel.msi is unexpectedly small: $size bytes" }
            msiexec /i gst-devel.msi /qn /norestart
            Write-Host "Installed GStreamer devel $ver (size $size bytes)"
          } else {
            Write-Host "Using cached GStreamer $ver"
          }
          if (-not (Test-Path (Join-Path $pcDir 'gstreamer-1.0.pc'))) { throw "GStreamer pkgconfig file missing after install" }
          "GSTREAMER_ROOT=$root"                | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ASCII
          "PKG_CONFIG_PATH=$pcDir"              | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ASCII
          "PATH=$root\bin;$env:PATH"            | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding ASCII
          Get-ChildItem $pcDir | Select-Object -First 5 | ForEach-Object { Write-Host "Found pc: $($_.Name)" }

      - name: Install pkg-config-lite
        shell: pwsh
        run: |
          choco install pkgconfiglite -y --no-progress
          $pkg = Get-Command pkg-config -ErrorAction SilentlyContinue
          if (-not $pkg) { throw 'pkg-config still not on PATH after installation' }
          pkg-config --version

      - name: Build (release)
        run: cargo build --release --locked

      - name: Prepare package
        id: prep
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = $env:GITHUB_REF -replace 'refs/tags/'
          $outDir = "target/release"
          if (!(Test-Path "$outDir/kinect-rtsp.exe")) { throw 'Missing kinect-rtsp.exe after build' }
          if (Test-Path 'run.ps1' -and !(Test-Path "$outDir/run.ps1")) { Copy-Item run.ps1 $outDir }
          $zipName = "kinect-rtsp-$tag-windows-x64.zip"
          Compress-Archive -Path "$outDir/kinect-rtsp.exe", "$outDir/run.ps1" -DestinationPath $zipName -Force
          Write-Host "Created $zipName"
          $hash = (Get-FileHash -Algorithm SHA256 $zipName).Hash
          "$hash  $zipName" | Out-File -FilePath "$zipName.sha256" -Encoding ASCII
          Write-Host "SHA256: $hash"
          "zip_name=$zipName" >> $env:GITHUB_OUTPUT

      - name: Upload artifacts (zip + checksum)
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ${{ steps.prep.outputs.zip_name }}
            ${{ steps.prep.outputs.zip_name }}.sha256

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.prep.outputs.zip_name }}
            ${{ steps.prep.outputs.zip_name }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
