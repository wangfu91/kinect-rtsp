name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Windows build
    runs-on: windows-latest
    env:
      CARGO_TERM_COLOR: always
      GST_VERSION: 1.26.5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry + build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Cache GStreamer
        id: gst-cache
        uses: actions/cache@v4
        with:
          path: C:\Program Files\gstreamer\1.0
          key: ${{ runner.os }}-gstreamer-devel-${{ env.GST_VERSION }}

      - name: Install / Setup GStreamer (devel only)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ver  = "$env:GST_VERSION"
          $root = 'C:\Program Files\gstreamer\1.0\msvc_x86_64'
          $pkgCfg = Join-Path $root 'bin/pkg-config.exe'
          if (-not (Test-Path $pkgCfg)) {
            Write-Host "GStreamer devel $ver not cached. Downloading devel package..."
            $base = "https://gstreamer.freedesktop.org/data/pkg/windows/$ver/msvc"
            $develMsi = "gstreamer-1.0-devel-msvc-x86_64-$ver.msi"
            Invoke-WebRequest "$base/$develMsi" -OutFile gst-devel.msi -UseBasicParsing
            Start-Process msiexec -ArgumentList '/i','gst-devel.msi','/qn','/norestart' -Wait
            Write-Host "Installed GStreamer devel $ver"
          } else {
            Write-Host "Using cached GStreamer devel $ver"
          }
          Add-Content -Path $env:GITHUB_ENV -Value "GSTREAMER_ROOT=$root"
          Add-Content -Path $env:GITHUB_ENV -Value "PKG_CONFIG_PATH=$root\lib\pkgconfig"
          Add-Content -Path $env:GITHUB_ENV -Value ("PATH=$($root)\bin;" + $env:PATH)
          & "$pkgCfg" --version

      - name: Build (release)
        run: cargo build --release --locked

      # (Optional) Add a test step here when tests are introduced
